{
  "stats": {
    "suites": 11,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2018-07-20T11:30:07.185Z",
    "end": "2018-07-20T11:30:07.243Z",
    "duration": 58,
    "testsRegistered": 11,
    "passPercent": 90.9,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 1,
    "hasSkipped": true,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "d13ccc0b-b024-4942-a0ab-974414f6b542",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [
      {
        "title": "should return false when it doesn't the word.",
        "fullTitle": "should return false when it doesn't the word.",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "let check = wd.Search(\"mu\")\nassert.equal(check, false);",
        "err": {},
        "isRoot": true,
        "uuid": "5acf53cb-9a0c-46bb-a964-c6350810aa22",
        "isHook": false,
        "skipped": true
      }
    ],
    "suites": [
      {
        "uuid": "308cfc44-30d2-4d03-ba68-2b68257446fd",
        "title": "Wordladder",
        "fullFile": "C:\\Users\\ty020\\Desktop\\RR\\projects\\Wordladder\\test.js",
        "file": "\\test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Wordladder \"before each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "let wd = new Wordladder(\"./test.json\");",
            "err": {},
            "isRoot": false,
            "uuid": "b20be62b-4e8f-40e9-8e7a-1b959a6e8d72",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8da6284e-9bb2-471f-9fc1-4b4a799487eb",
            "title": "#Search(word)",
            "fullFile": "C:\\Users\\ty020\\Desktop\\RR\\projects\\Wordladder\\test.js",
            "file": "\\test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true when it has the word.",
                "fullTitle": "Wordladder #Search(word) should return true when it has the word.",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let check = wd.Search(\"data\")\nassert.equal(check, true);\ntest(\"should return false when it doesn't the word.\", function () {\n    let check = wd.Search(\"mu\")\n    assert.equal(check, false);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c523e5b0-2378-41f1-975d-ad1322a90639",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c523e5b0-2378-41f1-975d-ad1322a90639"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "387de949-aa11-4db4-bfc7-e039e551cb81",
            "title": "#GetInput()",
            "fullFile": "C:\\Users\\ty020\\Desktop\\RR\\projects\\Wordladder\\test.js",
            "file": "\\test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "getInput return the input",
                "fullTitle": "Wordladder #GetInput() getInput return the input",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "wd.Input = \"data\";// setTheInput\nlet input = wd.GetInput();\nassert.equal(input, \"data\", \"==\");",
                "err": {},
                "isRoot": false,
                "uuid": "ea36a6b5-7645-46fa-8584-a79462fa4a36",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ea36a6b5-7645-46fa-8584-a79462fa4a36"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ed18a2ce-b826-44a9-94c4-800f96f3e5db",
            "title": "#GetOutput()",
            "fullFile": "C:\\Users\\ty020\\Desktop\\RR\\projects\\Wordladder\\test.js",
            "file": "\\test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "get the output",
                "fullTitle": "Wordladder #GetOutput() get the output",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "wd.Output = \"data\";\nassert.equal(wd.GetOutput(), \"data\");",
                "err": {},
                "isRoot": false,
                "uuid": "963f52ce-795b-4d62-9b5c-bad7b8be253f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "963f52ce-795b-4d62-9b5c-bad7b8be253f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "45da16da-e273-42b6-b4e2-b081adfeddb1",
            "title": "#SetOutput()",
            "fullFile": "C:\\Users\\ty020\\Desktop\\RR\\projects\\Wordladder\\test.js",
            "file": "\\test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "getOutput return the input",
                "fullTitle": "Wordladder #SetOutput() getOutput return the input",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "wd.Output = \"data\";// wrong output set\nwd.SetOutput(\"buff\");// right output set\nassert.equal(wd.Output, \"buff\");",
                "err": {},
                "isRoot": false,
                "uuid": "37cbb1e0-81e1-469c-b374-5f5b732476c5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "37cbb1e0-81e1-469c-b374-5f5b732476c5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "64e618a5-b515-4eca-9ec1-121302aa9556",
            "title": "#SetInput()",
            "fullFile": "C:\\Users\\ty020\\Desktop\\RR\\projects\\Wordladder\\test.js",
            "file": "\\test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "getInput return the input",
                "fullTitle": "Wordladder #SetInput() getInput return the input",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "wd.Input = \"data\";// raw set the wrong input\nwd.SetInput(\"buff\");// set the right input\nassert.equal(wd.Input, \"buff\");",
                "err": {},
                "isRoot": false,
                "uuid": "eb4f0979-939c-4fb1-83e5-b86d1c4f2911",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eb4f0979-939c-4fb1-83e5-b86d1c4f2911"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f6cbcd3d-6a92-43cc-8851-26bd887a6c8f",
            "title": "#BFS()",
            "fullFile": "C:\\Users\\ty020\\Desktop\\RR\\projects\\Wordladder\\test.js",
            "file": "\\test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return ['data', 'dota', 'cota', 'cote', 'code']",
                "fullTitle": "Wordladder #BFS() should return ['data', 'dota', 'cota', 'cote', 'code']",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "wd.SetInput(\"data\");\nwd.SetOutput(\"code\");\nassert.includeOrderedMembers(wd.BFS(), [ 'code', 'cote', 'cota', 'dota', 'data' ]);",
                "err": {},
                "isRoot": false,
                "uuid": "dc57d428-62ef-42ff-8421-3aa3b7a8d367",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dc57d428-62ef-42ff-8421-3aa3b7a8d367"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7cc4f510-caf1-46f6-b761-041d9d2bf2a8",
        "title": "UI",
        "fullFile": "C:\\Users\\ty020\\Desktop\\RR\\projects\\Wordladder\\test.js",
        "file": "\\test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "valid test",
            "fullTitle": "UI valid test",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "driver = new webdriver.Builder().forBrowser('chrome').build();//start chrome\ndriver.get(\"http://bilibili.cqdulux.cn\").then(function() {// to simplify, we choose to test the page at server not in the development environment\n    driver.findElement(By.id('input')).then(function(input){// get the input\n        input.sendKeys(\"data\").then(function(){// set the Input value to data\n            driver.findElement(By.id('output')).then(function(output){// get the output\n                output.click().then(function(){// click output to trigger word detection\n                    driver.findElement(By.id(\"input-valid\")).then(function(inputValid){\n                        inputValid.getAttribute('class').then(function(ClassName){\n                            expect(ClassName).to.equal(\"valid-feedback\");\n                            inputValid.getText().then(function(text){\n                                expect(text).to.equal(\"Looks good!\");\n                                driver.quit();\n                            })\n                        })\n                    })\n                })\n            });\n        })\n    });\n})",
            "err": {},
            "isRoot": false,
            "uuid": "8b35ab1e-e716-4551-838d-941e936f997b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8b35ab1e-e716-4551-838d-941e936f997b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 16,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "44e71522-b297-4e38-9877-b15bd4d0e68a",
        "title": "Wordladder BBD",
        "fullFile": "C:\\Users\\ty020\\Desktop\\RR\\projects\\Wordladder\\test.js",
        "file": "\\test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: Before all tests.",
            "fullTitle": "Wordladder BBD \"before all\" hook: Before all tests.",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "wd = new Wordladder(\"./test.json\");\nwd.SetInput(\"data\");\nwd.SetOutput(\"code\");",
            "err": {},
            "isRoot": false,
            "uuid": "43d7d572-8919-46e6-9cf8-2937c11783ec",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "de721913-53ea-40db-97b0-519ee5dd1e8c",
            "title": "search whether the word is in the dictionary",
            "fullFile": "C:\\Users\\ty020\\Desktop\\RR\\projects\\Wordladder\\test.js",
            "file": "\\test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true when it has the word.(data is in)",
                "fullTitle": "Wordladder BBD search whether the word is in the dictionary should return true when it has the word.(data is in)",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let check = wd.Search(\"data\")\nexpect(check).to.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "88098a20-4ba7-43c3-acc0-e72cbcd7062b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return false when it doesn't the word.(mu is not in)",
                "fullTitle": "Wordladder BBD search whether the word is in the dictionary should return false when it doesn't the word.(mu is not in)",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let check = wd.Search(\"mu\")\nexpect(check).to.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "df0e664f-0b0d-4cb0-8a80-65a49285135b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "88098a20-4ba7-43c3-acc0-e72cbcd7062b",
              "df0e664f-0b0d-4cb0-8a80-65a49285135b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0e7f82cf-c0a6-4f56-b645-9faeb733c3c9",
            "title": "the shortest path search",
            "fullFile": "C:\\Users\\ty020\\Desktop\\RR\\projects\\Wordladder\\test.js",
            "file": "\\test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the shortest path to appear in sequence ",
                "fullTitle": "Wordladder BBD the shortest path search should return the shortest path to appear in sequence ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(wd.BFS()).to.include.deep.ordered.members([ 'code', 'cote', 'cota', 'dota', 'data' ]);",
                "err": {},
                "isRoot": false,
                "uuid": "8d71937d-5512-4c73-810f-f7b18a353afc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8d71937d-5512-4c73-810f-f7b18a353afc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [
      "5acf53cb-9a0c-46bb-a964-c6350810aa22"
    ],
    "duration": null,
    "root": true,
    "rootEmpty": false,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}